# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile2(2)                                       :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: momadani <marvin@42.fr>                    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2021/11/01 16:26:07 by momadani          #+#    #+#              #
#    Updated: 2022/11/12 14:47:07 by diroyer          ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

################################################################################
#                                  ASCII ART                                   #
################################################################################

#ART_NAME_1	=	█▀█ █░█ █▀ █░█  █▀ █░█░█ ▄▀█ █▀█\n
#ART_NAME_2	=	█▀▀ █▄█ ▄█ █▀█  ▄█ ▀▄▀▄▀ █▀█ █▀▀\n

#ART_NAME_1	=	█▀▄▀█ █ █▄░█ █ █▀  █░█ █▀▀ █░░ █░░ \n
#ART_NAME_2	=	█░▀░█ █ █░▀█ █ ▄█  █▀█ ██▄ █▄▄ █▄▄\n

ART_BONUS_1	=	   █▄▄ █▀█ █▄░█ █░█ █▀\n
ART_BONUS_2	=	   █▄█ █▄█ █░▀█ █▄█ ▄█\n

ART_CLEAN_1	=	   █▀▀ █░░ █▀▀ ▄▀█ █▄░█\n
ART_CLEAN_2	=	   █▄▄ █▄▄ ██▄ █▀█ █░▀█\n

################################################################################
#                                   COLORS                                     #
################################################################################

BLINKING				=	\033[5m

INVERT					=	\e[7m

#BG						=	\e[48;2;32;10;52m
BG1						=	\e[48;2;00;52;00m
BG2						=	\e[48;2;60;03;03m

CC_GREEN				=	\e[38;5;46;1m
CC_RED					=	\e[31;1m
CC_GRAY					=	\e[38;5;15;1m

YELLOW1					=	\e[38;2;255;254;0m
YELLOW2					=	\e[38;2;245;242;3m
YELLOW3					=	\e[38;2;236;230;6m
YELLOW4					=	\e[38;2;227;218;9m
YELLOW5					=	\e[38;2;227;206;12m

#BLUE1					=	\e[38;2;0;251;255m
#BLUE2					=	\e[38;2;5;234;229m
BLUE1					=	\e[38;2;113;31;149m
BLUE2					=	\e[38;2;101;25;134m
BLUE3					=	\e[38;2;11;212;202m
BLUE4					=	\e[38;2;16;194;180m
BLUE5					=	\e[38;2;23;167;149m
BLUE6					=	\e[38;2;31;136;113m

#BLUE1					=	\e[38;2;84;255;0m
#BLUE2					=	\e[38;2;115;255;0m
#BLUE3					=	\e[38;2;148;255;0m
#BLUE4					=	\e[38;2;177;255;0m
#BLUE5					=	\e[38;2;203;255;0m
#BLUE6					=	\e[38;2;247;255;0m

GREEN1					=	\e[38;5;154m
GREEN2					=	\e[38;5;118m
GREEN3					=	\e[38;5;82m
GREEN4					=	\e[38;5;46m
GREEN5					=	\e[38;2;0;235;0m
GREEN6					=	\e[38;5;22m

RED1					=	\e[38;5;196m
RED2					=	\e[38;5;160m
RED3					=	\e[38;5;124m
RED4					=	\e[38;5;88m
RED5					=	\e[38;2;110;0;0m
RED6					=	\e[38;5;52m

LINE_CLN				=	\r\e[0K\e[2A

RESET					=	\e[0m

################################################################################
#                                  FUNCTIONS                                   #
################################################################################

I				=	1

NB_FILES		=	$(words $(SRCS))

NB_FILES_BONUS	=	$(words $(SRCS_FILES_BONUS))

LAST_FILE_BONUS	=	$(addprefix $(SRCS_DIR_BONUS), $(lastword $(SRCS_FILES_BONUS)))

PROGRESS_BAR	=	ProgressBar() {										\
					name=$$3;											\
					if [ "./$$name" = $(LAST_FILE_BONUS) -o				\
						 "./$$name" = $(lastword $(SRCS)) ];			\
					then name="[DONE]"; fi;								\
					progress=$$(echo "$$1*100/$(NB_FILES)*100/100" | bc);	\
					done=$$(echo "$$progress*3/10" | bc);				\
					left=$$(echo "30-$$done" | bc);						\
					fill=$$(printf "%*s" $$done | sed 's/ /█/g');		\
					empty=$$(printf "%*s" $$left | sed 's/ /█/g');		\
					if [ $$1 -ne 1 ]; then echo -n '$(LINE_CLN)'; fi;	\
					printf " $(CC_GRAY)Compiling source files	: \n\n";	\
					printf " $(CC_GREEN)$$fill$(CC_RED)$$empty$(RESET)$(CC_GRAY) $$progress%%";\
					printf " $(CC_GREEN)%s$(RESET)" $$name;			\
}

#PRINT_NAME		=	 printf "\n $(BLUE1)$(ART_NAME_1)$(RESET)	\
#								$(BLUE2)$(ART_NAME_2)$(RESET)\n"

PRINT_NAME		=	 printf "\n $(BG)$(YELLOW1)$(ART_NAME_1)$(RESET)	\
								$(BG)$(YELLOW2)$(ART_NAME_2)$(RESET)	\
								$(BG)$(YELLOW3)$(ART_NAME_3)$(RESET)	\
								$(BG)$(YELLOW4)$(ART_NAME_4)$(RESET)	\
								$(BG)$(YELLOW5)$(ART_NAME_5)$(RESET)\n"

PRINT_BONUS		=	 printf "\n $(GREEN3)$(ART_BONUS_1)$(RESET)	\
								$(GREEN4)$(ART_BONUS_2)$(RESET)\n"

PRINT_CLEAN		=	 printf "\n $(RED1)$(ART_CLEAN_1)$(RESET)	\
								$(RED2)$(ART_CLEAN_2)$(RESET)\n"

################################################################################
#                                    MAIN                                      #
################################################################################

NAME		 		=	push_swap

NAME_BONUS		 	=	checker

CC			 		=	clang

CFLAGS 		 		=	-Wall -Wextra -Werror -g3# -fsanitize=address

INCLUDES	 		=	includes

INCLUDES_BONUS 		=	bonus/includes

################################################################################
#                           MANDATORY SOURCE FILES                             #
################################################################################

SRCS_DIR			=	./srcs/

SRCS_INSTRUCTIONS 	= 	ft_push_a.c							\
						ft_push_b.c							\
						ft_swap_a.c							\
						ft_swap_b.c							\
						ft_swap_ab.c						\
						ft_rotate_a.c						\
						ft_rotate_b.c						\
						ft_rotate_ab.c						\
						ft_reverse_rotate_a.c				\
						ft_reverse_rotate_b.c				\
						ft_reverse_rotate_ab.c


SRCS_OUTPUT		 	=	ft_puterror.c						\
						ft_putendl_fd.c

SRCS_PARSING	 	=	ft_parse.c

SRCS_SORTING		=	ft_insertion_sort.c					\
						ft_small_sort.c						\
						ft_longuest_increasing_sequence.c	\
						ft_remove_not_lis.c					\
						ft_replace.c						\
						ft_find_position.c

SRCS_STACK			=	ft_create_elem.c					\
						ft_stackadd_top.c					\
						ft_stackadd_bottom.c				\
						ft_swap_nodes.c						\
						ft_stack_min.c						\
						ft_stack_max.c						\
						ft_free_stack.c						\
						ft_stacklen.c						\
						ft_set_middle.c
	

SRCS_UTILS			=	ft_atoi.c							\
						ft_abs.c							\
						ft_min.c							\
						ft_strlen.c

SRCS_FILES		 	=	main.c												\
						$(addprefix instructions/, $(SRCS_INSTRUCTIONS))	\
						$(addprefix output/, $(SRCS_OUTPUT))				\
						$(addprefix parsing/, $(SRCS_PARSING))				\
						$(addprefix sorting/, $(SRCS_SORTING))				\
						$(addprefix stack/, $(SRCS_STACK))					\
						$(addprefix utils/, $(SRCS_UTILS))

SRCS				=	$(addprefix $(SRCS_DIR), $(SRCS_FILES))

################################################################################
#                             BONUS SOURCE FILES                               #
################################################################################

SRCS_DIR_BONUS		=	./bonus/

SRCS_GNL_BONUS		=	get_next_line_bonus.c								\
						get_next_line_utils_bonus.c

SRCS_SORTING_BONUS	=	ft_manual_sort_bonus.c

SRCS_INSTRUCT_BONUS	=	ft_push_bonus.c										\
						ft_reverse_rotate_bonus.c							\
						ft_rotate_bonus.c									\
						ft_swap_bonus.c

SRCS_FILES_BONUS	=	main_bonus.c										\
						$(addprefix sorting/, $(SRCS_SORTING_BONUS))		\
						$(addprefix instructions/, $(SRCS_INSTRUCT_BONUS))	\
						$(addprefix get_next_line/, $(SRCS_GNL_BONUS))

SRCS_BONUS			=	$(addprefix $(SRCS_DIR_BONUS), $(SRCS_FILES_BONUS))	\
						$(addprefix $(SRCS_DIR)output/, $(SRCS_OUTPUT))		\
						$(addprefix $(SRCS_DIR)parsing/, $(SRCS_PARSING))	\
						$(addprefix $(SRCS_DIR)stack/, $(SRCS_STACK))		\
						$(addprefix $(SRCS_DIR)utils/, $(SRCS_UTILS))


################################################################################
#                                OBJECT FILES                                  #
################################################################################

OBJS 			 	=	$(SRCS:.c=.o)

OBJS_BONUS			=	$(SRCS_BONUS:.c=.o)

################################################################################
#                                    RULES                                     #
################################################################################

all : $(NAME)

bonus : $(NAME_BONUS)

$(NAME) : $(OBJS)
	@$(CC) -o $@ $(CFLAGS) -I./$(INCLUDES) $^
	@printf "\n\n $(CC_GRAY)Creating binary	:$(CC_GREEN) %-42s\n$(RESET)" $(NAME)
	@$(PRINT_NAME)

$(NAME_BONUS) : $(OBJS_BONUS)
	@$(CC) -o $(NAME_BONUS) $(CFLAGS) -I./$(INCLUDES) -I./$(INCLUDES_BONUS) $^
	@printf "\n\n $(CC_GRAY)Creating bonus binary  :$(CC_GREEN) %-43s\n$(RESET)" $(NAME_BONUS)
	@$(PRINT_BONUS)

%.o : %.c $(INCLUDES)
	@$(CC) -o $@ $(CFLAGS) -c $< -I./$(INCLUDES) -I./$(INCLUDES_BONUS)
	@$(if $(findstring $<, $(firstword $(SRCS_BONUS))), $(eval NB_FILES = $(NB_FILES_BONUS)))
	@$(PROGRESS_BAR); ProgressBar $(I) $(NB_FILES) $<
	@$(eval I = $(shell echo $$(($(I) + 1))))

clean :
	@rm -rf $(OBJS) $(OBJS_BONUS)
	@printf " $(CC_GRAY)Deleting object files	:$(CC_RED) \e[31;9m*.o\n$(RESET)"

bclean :
	@rm -rf $(NAME) $(NAME_BONUS)
	@printf " $(CC_GRAY)Deleting binary files	:$(CC_RED) \e[31;9m$(NAME) $(NAME_BONUS)\n$(RESET)"

fclean : bclean clean
	@$(PRINT_CLEAN)

re : fclean all

.PHONY : all clean bclean bonus fclean re
